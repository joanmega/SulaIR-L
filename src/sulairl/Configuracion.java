package sulairl;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.tika.exception.TikaException;
import org.xml.sax.SAXException;


/**
 * @author José Antonio Medina García
 */

public class Configuracion extends javax.swing.JFrame{
   
    boolean colCargada = false, stopWordsCargado = false;
	public static Coleccion col;
	public ArrayList<ArchivosColeccion> docOriginales;
	private int cont;
    
    /**
     * Creates new form configuracion
     */
    public Configuracion() {
        initComponents();
		cont = 0;
		docOriginales = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fcDirColeccion = new javax.swing.JFileChooser();
        pError = new javax.swing.JOptionPane();
        bgIdioma = new javax.swing.ButtonGroup();
        bgPublica = new javax.swing.ButtonGroup();
        jdProcesamiento = new javax.swing.JDialog();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        bContinuar = new javax.swing.JButton();
        jProgreso = new javax.swing.JProgressBar();
        jdCargarColeccion = new javax.swing.JDialog();
        lCargandoColeccion = new javax.swing.JLabel();
        jdAyuda = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPaneAyuda = new javax.swing.JTextPane();
        pExistenteColeccion = new javax.swing.JPanel();
        lColecciones = new javax.swing.JLabel();
        lEtapaInicio = new javax.swing.JLabel();
        jListaEtapa = new javax.swing.JComboBox<>();
        jListaColecciones = new javax.swing.JComboBox<>();
        bCargarExistente = new javax.swing.JButton();
        bBorrarExistente = new javax.swing.JButton();
        lTituloConfiguracion = new javax.swing.JLabel();
        pNuevaColeccion = new javax.swing.JPanel();
        lDocColeccion = new javax.swing.JLabel();
        tDirColeccion = new javax.swing.JTextField();
        bDirColeccion = new javax.swing.JButton();
        tNomColeccion = new javax.swing.JTextField();
        lNomColeccion = new javax.swing.JLabel();
        bNuevaCol = new javax.swing.JButton();
        cbStopWords = new javax.swing.JCheckBox();
        tFileStopWords = new javax.swing.JTextField();
        bDirStopWords = new javax.swing.JButton();
        pIdiomaColeccion = new javax.swing.JPanel();
        rbSpanish = new javax.swing.JRadioButton();
        rbEnglish = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();

        fcDirColeccion.setAcceptAllFileFilterUsed(false);
        fcDirColeccion.setDialogTitle("Seleccione la carpeta de la colección");
        fcDirColeccion.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        jdProcesamiento.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jdProcesamiento.setTitle("Procesamiento de documentos");
        jdProcesamiento.setBackground(new java.awt.Color(204, 204, 204));
        jdProcesamiento.setMinimumSize(new java.awt.Dimension(600, 216));
        jdProcesamiento.setModal(true);
        jdProcesamiento.setResizable(false);
        jdProcesamiento.setSize(new java.awt.Dimension(350, 260));
        jdProcesamiento.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                jdProcesamientoWindowOpened(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setText("En este proceso se realiza el análisis léxico de los documentos:");

        jLabel8.setText("1º Primero se tokeniza el documento.");

        jLabel9.setText("2º Quitamos las palabra vacías ( si corresponde).");

        jLabel10.setText("3º Se realiza la estemización");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        bContinuar.setText("Continuar");
        bContinuar.setEnabled(false);
        bContinuar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bContinuarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jdProcesamientoLayout = new javax.swing.GroupLayout(jdProcesamiento.getContentPane());
        jdProcesamiento.getContentPane().setLayout(jdProcesamientoLayout);
        jdProcesamientoLayout.setHorizontalGroup(
            jdProcesamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdProcesamientoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jdProcesamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bContinuar, javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgreso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jdProcesamientoLayout.setVerticalGroup(
            jdProcesamientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jdProcesamientoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bContinuar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jdCargarColeccion.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jdCargarColeccion.setMinimumSize(new java.awt.Dimension(250, 100));
        jdCargarColeccion.setModal(true);
        jdCargarColeccion.setResizable(false);

        lCargandoColeccion.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lCargandoColeccion.setForeground(new java.awt.Color(255, 0, 0));
        lCargandoColeccion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lCargandoColeccion.setText("Cargando colección");

        javax.swing.GroupLayout jdCargarColeccionLayout = new javax.swing.GroupLayout(jdCargarColeccion.getContentPane());
        jdCargarColeccion.getContentPane().setLayout(jdCargarColeccionLayout);
        jdCargarColeccionLayout.setHorizontalGroup(
            jdCargarColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdCargarColeccionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lCargandoColeccion, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jdCargarColeccionLayout.setVerticalGroup(
            jdCargarColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdCargarColeccionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lCargandoColeccion, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jdAyuda.setTitle("Ayuda");
        jdAyuda.setMinimumSize(new java.awt.Dimension(575, 346));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Ayuda"));

        jPaneAyuda.setContentType("text/html"); // NOI18N
        jScrollPane1.setViewportView(jPaneAyuda);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jdAyudaLayout = new javax.swing.GroupLayout(jdAyuda.getContentPane());
        jdAyuda.getContentPane().setLayout(jdAyudaLayout);
        jdAyudaLayout.setHorizontalGroup(
            jdAyudaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdAyudaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jdAyudaLayout.setVerticalGroup(
            jdAyudaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdAyudaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Configuración para la nueva sesión de SulaIR-L");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pExistenteColeccion.setBorder(javax.swing.BorderFactory.createTitledBorder("Cargar una colección existente"));
        pExistenteColeccion.setMaximumSize(new java.awt.Dimension(388, 202));
        pExistenteColeccion.setMinimumSize(new java.awt.Dimension(388, 202));

        lColecciones.setText("Colecciones");

        lEtapaInicio.setText("Etapa de inicio");

        jListaEtapa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Preprocesado", "Indexación", "Consultas" }));

        bCargarExistente.setText("Aceptar");
        bCargarExistente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCargarExistenteActionPerformed(evt);
            }
        });

        bBorrarExistente.setText("Borrar");
        bBorrarExistente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBorrarExistenteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pExistenteColeccionLayout = new javax.swing.GroupLayout(pExistenteColeccion);
        pExistenteColeccion.setLayout(pExistenteColeccionLayout);
        pExistenteColeccionLayout.setHorizontalGroup(
            pExistenteColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pExistenteColeccionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pExistenteColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lEtapaInicio)
                    .addComponent(lColecciones)
                    .addGroup(pExistenteColeccionLayout.createSequentialGroup()
                        .addComponent(bCargarExistente, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(bBorrarExistente, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jListaEtapa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jListaColecciones, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pExistenteColeccionLayout.setVerticalGroup(
            pExistenteColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pExistenteColeccionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lColecciones)
                .addGap(6, 6, 6)
                .addComponent(jListaColecciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lEtapaInicio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jListaEtapa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pExistenteColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bCargarExistente)
                    .addComponent(bBorrarExistente))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lTituloConfiguracion.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lTituloConfiguracion.setText("CONFIGURACIÓN GENERAL");

        pNuevaColeccion.setBorder(javax.swing.BorderFactory.createTitledBorder("Directorios de la nueva colección"));
        pNuevaColeccion.setMaximumSize(new java.awt.Dimension(418, 340));
        pNuevaColeccion.setMinimumSize(new java.awt.Dimension(418, 340));

        lDocColeccion.setText("Directorio de la colección de documentos");

        tDirColeccion.setEnabled(false);
        tDirColeccion.setMaximumSize(new java.awt.Dimension(261, 27));
        tDirColeccion.setMinimumSize(new java.awt.Dimension(261, 27));
        tDirColeccion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tDirColeccionMouseClicked(evt);
            }
        });

        bDirColeccion.setText("Examinar...");
        bDirColeccion.setToolTipText("");
        bDirColeccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDirColeccionActionPerformed(evt);
            }
        });

        tNomColeccion.setMaximumSize(new java.awt.Dimension(261, 27));
        tNomColeccion.setMinimumSize(new java.awt.Dimension(261, 27));
        tNomColeccion.setPreferredSize(new java.awt.Dimension(261, 27));

        lNomColeccion.setText("Nombre de la colección");

        bNuevaCol.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
        bNuevaCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNuevaColActionPerformed(evt);
            }
        });

        cbStopWords.setSelected(true);
        cbStopWords.setText("Utilizar archivo de palabras vacías");
        cbStopWords.setMaximumSize(new java.awt.Dimension(261, 18));
        cbStopWords.setMinimumSize(new java.awt.Dimension(261, 18));
        cbStopWords.setPreferredSize(new java.awt.Dimension(261, 18));
        cbStopWords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbStopWordsActionPerformed(evt);
            }
        });

        tFileStopWords.setEnabled(false);
        tFileStopWords.setMaximumSize(new java.awt.Dimension(261, 27));
        tFileStopWords.setMinimumSize(new java.awt.Dimension(261, 27));
        tFileStopWords.setPreferredSize(new java.awt.Dimension(261, 27));
        tFileStopWords.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tFileStopWordsMouseClicked(evt);
            }
        });

        bDirStopWords.setText("Examinar...");
        bDirStopWords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDirStopWordsActionPerformed(evt);
            }
        });

        pIdiomaColeccion.setBorder(javax.swing.BorderFactory.createTitledBorder("Idioma de la colección"));
        pIdiomaColeccion.setMaximumSize(new java.awt.Dimension(197, 71));
        pIdiomaColeccion.setMinimumSize(new java.awt.Dimension(197, 71));

        bgIdioma.add(rbSpanish);
        rbSpanish.setSelected(true);
        rbSpanish.setText("Español");

        bgIdioma.add(rbEnglish);
        rbEnglish.setText("English");

        javax.swing.GroupLayout pIdiomaColeccionLayout = new javax.swing.GroupLayout(pIdiomaColeccion);
        pIdiomaColeccion.setLayout(pIdiomaColeccionLayout);
        pIdiomaColeccionLayout.setHorizontalGroup(
            pIdiomaColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pIdiomaColeccionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbSpanish)
                .addGap(18, 18, 18)
                .addComponent(rbEnglish)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pIdiomaColeccionLayout.setVerticalGroup(
            pIdiomaColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pIdiomaColeccionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pIdiomaColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSpanish)
                    .addComponent(rbEnglish))
                .addContainerGap())
        );

        javax.swing.GroupLayout pNuevaColeccionLayout = new javax.swing.GroupLayout(pNuevaColeccion);
        pNuevaColeccion.setLayout(pNuevaColeccionLayout);
        pNuevaColeccionLayout.setHorizontalGroup(
            pNuevaColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNuevaColeccionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pNuevaColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bNuevaCol)
                    .addGroup(pNuevaColeccionLayout.createSequentialGroup()
                        .addGroup(pNuevaColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pIdiomaColeccion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tDirColeccion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pNuevaColeccionLayout.createSequentialGroup()
                                .addGroup(pNuevaColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbStopWords, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lNomColeccion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(tFileStopWords, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tNomColeccion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lDocColeccion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pNuevaColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pNuevaColeccionLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(bDirColeccion))
                            .addGroup(pNuevaColeccionLayout.createSequentialGroup()
                                .addComponent(bDirStopWords)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        pNuevaColeccionLayout.setVerticalGroup(
            pNuevaColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNuevaColeccionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lDocColeccion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pNuevaColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tDirColeccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bDirColeccion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lNomColeccion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tNomColeccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbStopWords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pNuevaColeccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tFileStopWords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bDirStopWords))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pIdiomaColeccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bNuevaCol)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Media/help_icono.png"))); // NOI18N
        jButton1.setToolTipText("Ayuda");
        jButton1.setMaximumSize(new java.awt.Dimension(25, 25));
        jButton1.setMinimumSize(new java.awt.Dimension(25, 25));
        jButton1.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pNuevaColeccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pExistenteColeccion, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(255, 255, 255)
                        .addComponent(lTituloConfiguracion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lTituloConfiguracion)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pNuevaColeccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pExistenteColeccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
	
    private void bDirColeccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDirColeccionActionPerformed
		fcDirColeccion.setFileFilter(null);
		fcDirColeccion.setDialogTitle(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("titulo_ventana_dialog_coleccion"));
		fcDirColeccion.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		int opcion = fcDirColeccion.showOpenDialog(this);
		if (opcion == JFileChooser.APPROVE_OPTION){
			colCargada = true;
			tDirColeccion.setText(fcDirColeccion.getSelectedFile().getAbsolutePath());
		}else{
			if (opcion == JFileChooser.CANCEL_OPTION && !colCargada){
			JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("optionDialog_coleccion_no_seleccionada"), ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_atencion"), 
				JOptionPane.INFORMATION_MESSAGE, JOptionPane.INFORMATION_MESSAGE, 
				null, new Object[]{ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar")},ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
			}
		}
    }//GEN-LAST:event_bDirColeccionActionPerformed

    private void tDirColeccionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tDirColeccionMouseClicked
        ActionEvent e = null;
        bDirColeccionActionPerformed(e);
    }//GEN-LAST:event_tDirColeccionMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
		cambiarIdioma();
		cargarListaColecciones();
    }//GEN-LAST:event_formWindowOpened

    private void bNuevaColActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNuevaColActionPerformed
		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
		jdProcesamiento.setLocation(dim.width/2-jdProcesamiento.getSize().width/2, dim.height/2-jdProcesamiento.getSize().height/2);
		cont = 0;
		docOriginales.clear();
		try {
			if (tDirColeccion.getText().equals("")){
				JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("optionDialog_coleccion_no_cargada"), ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_atencion"), 
					JOptionPane.INFORMATION_MESSAGE, JOptionPane.INFORMATION_MESSAGE, 
					null, new Object[]{ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar")},ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
			}else{
				if (tNomColeccion.getText().equals("")){	// Controlamos que el nombre de la colección no esté vacio.
					JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("optionDialog_nombre_coleccion_vacio"), ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_atencion"), 
						JOptionPane.INFORMATION_MESSAGE, JOptionPane.INFORMATION_MESSAGE, 
						null, new Object[]{ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar")},ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
				}else{
					if (cbStopWords.isSelected() && tFileStopWords.getText().equals("")){	// Controlamos que haya un archivo de palabras vacías si está seleccionado.
						JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("optionDialog_stopword_no_cargado"), ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_atencion"), 
							JOptionPane.INFORMATION_MESSAGE, JOptionPane.INFORMATION_MESSAGE, 
							null, new Object[]{ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar")},ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
					}else{
						if (new File("./colecciones/" + tNomColeccion.getText()).exists()){
							// preguntamos
							int option = JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("optionDialog_coleccion_existente"), ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("optionDialog_titulo_coleccion_existente"), JOptionPane.YES_NO_OPTION, 
								JOptionPane.QUESTION_MESSAGE, null, null, null);
							if (option == JOptionPane.YES_OPTION){
//								System.out.println("Borrando la carpeta en local");
								FileUtils.forceDelete(new File("./colecciones/" + tNomColeccion.getText()));
								if (!addFiles(new File(tDirColeccion.getText()), docOriginales)){
									JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("optionDialog_directorio_sin_documentos"), ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_atencion"), 
										JOptionPane.INFORMATION_MESSAGE, JOptionPane.INFORMATION_MESSAGE, 
										null, new Object[]{ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar")},ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
								}else{
									// Creamos el archivo de configuración
									String stopWord = "null";
									String idioma = "es";
									if (cbStopWords.isSelected()){
										stopWord = new File(tFileStopWords.getText()).getName();
									}
									if (rbEnglish.isSelected()){
										idioma = "en";
									}
									SulaIRL.archivoConf = new ArchivoConf(tDirColeccion.getText(), docOriginales.size(), stopWord, 0, tNomColeccion.getText(), idioma);
									if (SulaIRL.archivoConf.guardarConfiguración(tNomColeccion.getText())){
										jdProcesamiento.setVisible(true);
									}else{
										JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_optionDialog_creacionArchivoErronea"), ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_atencion"), 
											JOptionPane.ERROR_MESSAGE, JOptionPane.ERROR_MESSAGE, null, new Object[]{ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar")}, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
									}
								}
							}
						}else{
							if (!addFiles(new File(tDirColeccion.getText()), docOriginales)){
								JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("optionDialog_directorio_sin_documentos"), ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_atencion"), 
									JOptionPane.INFORMATION_MESSAGE, JOptionPane.INFORMATION_MESSAGE, 
									null, new Object[]{ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar")},ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
							}else{
								// Creamos el archivo de configuración
								String stopWord = "null";
								String idioma = "es";
								if (cbStopWords.isSelected()){
									stopWord = new File(tFileStopWords.getText()).getName();
								}
								if (rbEnglish.isSelected()){
									idioma = "en";
								}
								SulaIRL.archivoConf = new ArchivoConf(tDirColeccion.getText(), docOriginales.size(), stopWord, 0, tNomColeccion.getText(), idioma);
								if (SulaIRL.archivoConf.guardarConfiguración(tNomColeccion.getText())){
									jdProcesamiento.setVisible(true);
								}else{
									JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_optionDialog_creacionArchivoErronea"), ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_atencion"), 
										JOptionPane.ERROR_MESSAGE, JOptionPane.ERROR_MESSAGE, null, new Object[]{ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar")}, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
								}
							}
						}
					}
				}
			}
		} catch (IOException ex) {
			Logger.getLogger(Configuracion.class.getName()).log(Level.SEVERE, null, ex);
		}
		
//		System.out.println("FIN");
    }//GEN-LAST:event_bNuevaColActionPerformed

    private void cbStopWordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbStopWordsActionPerformed
		if (cbStopWords.isSelected()){
			bDirStopWords.setEnabled(true);
		}else{
			bDirStopWords.setEnabled(false);
		}
    }//GEN-LAST:event_cbStopWordsActionPerformed

    private void bDirStopWordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDirStopWordsActionPerformed
		fcDirColeccion.setDialogTitle(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("titulo_ventana_dialog_stopWord"));
		if (cbStopWords.isSelected()){
			FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.txt", "txt");
			fcDirColeccion.setFileFilter(filtro);
			fcDirColeccion.setFileSelectionMode(JFileChooser.FILES_ONLY);
			int opcion = fcDirColeccion.showOpenDialog(this);
			if (opcion == JFileChooser.APPROVE_OPTION) {
				stopWordsCargado = true;
				tFileStopWords.setText(fcDirColeccion.getSelectedFile().getAbsolutePath());
			}else{
				if (opcion == JFileChooser.CANCEL_OPTION && !stopWordsCargado){
					JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("optionDialog_stopWord_no_seleccionado"), ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("titulo_ventana_dialog_stopWord"), 
						JOptionPane.INFORMATION_MESSAGE, JOptionPane.INFORMATION_MESSAGE, 
						null, new Object[]{ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar")}, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
				}
			}
		}
    }//GEN-LAST:event_bDirStopWordsActionPerformed

    private void tFileStopWordsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tFileStopWordsMouseClicked
		if (cbStopWords.isSelected()){
			ActionEvent e = null;
			bDirStopWordsActionPerformed(e);
		}
    }//GEN-LAST:event_tFileStopWordsMouseClicked

    private void bBorrarExistenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBorrarExistenteActionPerformed
		int option = JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("optionDialog_borrar_coleccion_existente") + jListaColecciones.getSelectedItem() +"?", ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("optionDialog_titulo_borrar_coleccion"), JOptionPane.YES_NO_OPTION, 
			JOptionPane.QUESTION_MESSAGE, null, null, null);
		if (option == JOptionPane.YES_OPTION){
			try {
				FileUtils.deleteDirectory(new File("./colecciones/"+jListaColecciones.getSelectedItem().toString()));
				cargarListaColecciones();
			} catch (IOException ex) {
				Logger.getLogger(Configuracion.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
    }//GEN-LAST:event_bBorrarExistenteActionPerformed

    private void bContinuarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bContinuarActionPerformed
		try {
			Aplicacion app = new Aplicacion();		// Creamos una nueva instancia de Aplicacion.java
			Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
			app.setLocation(dim.width/2-app.getSize().width/2, dim.height/2-app.getSize().height/2);
			app.setVisible(true);
			jdProcesamiento.setVisible(false);
			this.dispose();
		} catch (IOException ex) {
			Logger.getLogger(Configuracion.class.getName()).log(Level.SEVERE, null, ex);
		}
    }//GEN-LAST:event_bContinuarActionPerformed

    private void jdProcesamientoWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jdProcesamientoWindowOpened
		String idioma="es";
		jProgreso.setStringPainted(true);
		int numHebras = 4;
		if (rbEnglish.isSelected()){
			idioma = "en";
		}
//		System.out.println("Procesando documentos.");
		if (cbStopWords.isSelected()){
			HebraProcesaStopWords[] hebra = new HebraProcesaStopWords[numHebras];
			try {
				col = new Coleccion(tNomColeccion.getText(), "./colecciones/" + tNomColeccion.getText()+"/", 0, tFileStopWords.getText(), idioma, docOriginales);
				for (int i = 0; i<numHebras; i++){
					hebra[i] = new HebraProcesaStopWords(i, numHebras);
					hebra[i].start();
				}
			} catch (IOException ex) { Logger.getLogger(Configuracion.class.getName()).log(Level.SEVERE, null, ex);}
		}else{
			HebraProcesaNoStopWords[] hebra = new HebraProcesaNoStopWords[numHebras];
			col = new Coleccion(tNomColeccion.getText(), "./colecciones/" + tNomColeccion.getText()+"/", 0, idioma, docOriginales);
			for (int i = 0; i<numHebras; i++){
				hebra[i] = new HebraProcesaNoStopWords(i, numHebras);
				hebra[i].start();
			}
		}
    }//GEN-LAST:event_jdProcesamientoWindowOpened

    private void bCargarExistenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCargarExistenteActionPerformed
        if(SulaIRL.archivoConf.leerConfiguración(jListaColecciones.getSelectedItem().toString())){
			if (new File(SulaIRL.archivoConf.getCarpetaOriginal()).exists()){
//				SulaIRL.archivoConf.imprimirArchivoConf();
				int etapaActual = SulaIRL.archivoConf.getEtapa();
				if (etapaActual < jListaEtapa.getSelectedIndex()){
					JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_optionDialog_cargaColeccionErronea1") + "\"" + getEtapa(jListaEtapa.getSelectedIndex()) + "\"" +
						". " + ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_optionDialog_cargaColeccionErronea2") +"\"" + getEtapa(etapaActual) +"\"" +
						"\n" + ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_optionDialog_cargaColeccionErronea3"), 
						ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_atencion"), 
						JOptionPane.INFORMATION_MESSAGE, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar")},
						ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
				}else{
					// Si la etapa seleccionada es la de preprocesamiento...
					HebraCargandoColeccion hebraCargandoColeccion = new HebraCargandoColeccion();
					hebraCargandoColeccion.start();
					Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
					jdCargarColeccion.setLocation(dim.width/2-jdCargarColeccion.getSize().width/2, dim.height/2-jdCargarColeccion.getSize().height/2);
					jdCargarColeccion.setVisible(true);				
				}
			}else{
				JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_optionDialog_cargaColeccion"), ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_atencion"), 
					JOptionPane.ERROR_MESSAGE, JOptionPane.ERROR_MESSAGE, null, new Object[]{ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar")}, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
			}
		}else{
			JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_optionDialog_cargaArchivoErronea"), ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_atencion"), 
				JOptionPane.ERROR_MESSAGE, JOptionPane.ERROR_MESSAGE, null, new Object[]{ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar")}, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
		}
    }//GEN-LAST:event_bCargarExistenteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
		jdAyuda.setLocation(dim.width/2-jdAyuda.getSize().width/2, dim.height/2-jdAyuda.getSize().height/2);
		jPaneAyuda.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("contenido_pane_ayuda_configuracion"));
		jPaneAyuda.setCaretPosition(0);
		jdAyuda.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

	private boolean cargarEtapa1(){
		docOriginales.clear();
		if (!addFiles(new File(SulaIRL.archivoConf.getCarpetaOriginal()), docOriginales)){
			return false;
		}else{
			int numDocumentosColeccion = SulaIRL.archivoConf.getNumDocumentos();
			if (!(docOriginales.size() == numDocumentosColeccion)){
				JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_optionDialog_numDocOriginalesErroneo"), ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_atencion"), 
					JOptionPane.ERROR_MESSAGE, JOptionPane.ERROR_MESSAGE, null, new Object[]{ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar")}, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
			}else{
				col = new Coleccion(jListaColecciones.getSelectedItem().toString(), SulaIRL.archivoConf.getEtapa(), SulaIRL.archivoConf.getIdioma(), docOriginales, SulaIRL.archivoConf.getStopWord());
				if (col.getArchivoOriginal().size() != numDocumentosColeccion || col.getArchivoStemizados().size() != numDocumentosColeccion
					|| col.getArchivoTokenizados().size() != numDocumentosColeccion || (col.getArchivoStopWords().size() !=  numDocumentosColeccion && col.getStopWord() != null)){
					jdCargarColeccion.dispose();
					JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_optionDialog_numDocProcesadosErroneo"),
						ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_atencion"),
						JOptionPane.ERROR_MESSAGE, JOptionPane.ERROR_MESSAGE, null, new Object[]{ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar")},
						ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
					return false;
				}
			}
		}
		return true;
	}
	
	private String getEtapa(int etapa){
		if (etapa == 0){
			return ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("cbEtapa_Preprocesado");
		}else{
			if (etapa == 1){
				return ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("cbEtapa_Indexacion");
			}else{
				return ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("cbEtapa_Consultas");
			}
		}
	}
	
	private Boolean addFiles(File file, ArrayList<ArchivosColeccion> archivos){
        if(!file.exists()){	// Si no existe el directorio
            return false;
        }else{	// Si existe
	        if(file.isDirectory()){	// si es un directorio hacemos una llamada recursiva
                for(File f : file.listFiles()){
                    addFiles(f, archivos);	// Cargamos el directorio
                }
            }else{	// Añadimos la ruta del fichero
				if (FilenameUtils.getExtension(file.getPath()).equals("txt") || FilenameUtils.getExtension(file.getPath()).equals("pdf") || FilenameUtils.getExtension(file.getPath()).equals("xml") || 
					FilenameUtils.getExtension(file.getPath()).equals("html") || FilenameUtils.getExtension(file.getPath()).equals("htm") || FilenameUtils.getExtension(file.getPath()).equals("doc") ||
					FilenameUtils.getExtension(file.getPath()).equals("docx")){
//						System.out.println(file.getPath());
						ArchivosColeccion archivoOri = new ArchivosColeccion(archivos.size(), file.getPath());
						archivos.add(archivoOri);
				}
            }
		}
		return !archivos.isEmpty();
    }

	private boolean cargarEtapas(int etapa) {
		try {
			if (cargarEtapa1()){
				SulaIRL.indice = new Index();
				if (SulaIRL.indice.createIndexReader(SulaIRL.archivoConf.getCarpetaColec())){
					SulaIRL.indice.getNumDocs();
					Aplicacion app = new Aplicacion(); // Creamos una nueva instancia de Aplicacion.java
					Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
					app.setLocation(dim.width/2-app.getSize().width/2, dim.height/2-app.getSize().height/2);
					app.rellenarIndiceCompleto();
					app.setVisible(true);
					app.etapa = etapa;
					this.dispose();
					return true;
				}else{
					JOptionPane.showOptionDialog(this, ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_optionDialog_recIndiceErroneo"),
						ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_atencion"),
						JOptionPane.ERROR_MESSAGE, JOptionPane.ERROR_MESSAGE, null, new Object[]{ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar")},
						ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
					return false;
				}
			}else{
				return false;
			}
		} catch (IOException ex) {
			Logger.getLogger(Configuracion.class.getName()).log(Level.SEVERE, null, ex);
		}
		return false;
	}
	
	private class HebraProcesaStopWords extends Thread{

		private int numHebra;
		private int numHebras;
		
		long time_start, time_end;
		
		public HebraProcesaStopWords(){
			cont = 0;
		}
		
		public HebraProcesaStopWords(int unNumHebra, int unNumHebras){
			numHebra = unNumHebra;
			numHebras = unNumHebras;
		}
		
		@Override
		public void run() {
			try {
//				System.out.println("Iniciando hebra " + numHebra);
				if ((cont+1)*100/docOriginales.size() == 0){
					time_start = System.currentTimeMillis();
				}
				
				for (int i = numHebra; i<docOriginales.size(); i+=numHebras){
					col.IndexarStopWords(docOriginales.get(i));
					synchronized(jProgreso){
						cont++;
						jProgreso.setValue((cont)*100/docOriginales.size());
//						System.out.println("Escribe hebra: " + numHebra + " con el doc: " + docOriginales.get(i).getNumArchivo() + " completado el " + (cont+1)*100.0/docOriginales.size() + "%");
					}
				}
//				col.imprimirDatos();
				if ((cont)*100/docOriginales.size() == 100.0){
					time_end = System.currentTimeMillis();
//					System.out.println("Tiempo empleado "+ ( time_end - time_start )/1000 +" segundos");
					bContinuar.setEnabled(true);
				}
//				System.out.println("Termina hebra: " + numHebra);
			} catch (TikaException | IOException | SAXException ex) {
				Logger.getLogger(Configuracion.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
	};
	
	private class HebraProcesaNoStopWords extends Thread{

		private int numHebra;
		private int numHebras;
		
		long time_start, time_end;
		
		public HebraProcesaNoStopWords(){
			cont = 0;
		}
		
		public HebraProcesaNoStopWords(int unNumHebra, int unNumHebras){
			numHebra = unNumHebra;
			numHebras = unNumHebras;
		}
		
		@Override
		public void run() {
			try {
//				System.out.println("Iniciando hebra: " + numHebra);
				if ((cont+1)*100/docOriginales.size() == 0){
					time_start = System.currentTimeMillis();
				}
				for (int i = numHebra; i<docOriginales.size(); i+=numHebras){
					col.IndexarNoStopWords(docOriginales.get(i));
//					System.out.println("Hebra " + numHebra + " procesando " + docOriginales.get(i).getNumArchivo());
					synchronized(jProgreso){
						cont++;
						jProgreso.setValue((cont)*100/docOriginales.size());
//						System.out.println("Termina hebra: " + numHebra + " con el doc: " + docOriginales.get(i).getNumArchivo() + " completado el " + (cont+1)*100.0/docOriginales.size() + "%");
					}
				}
//				col.imprimirDatos();
				if ((cont)*100/docOriginales.size() == 100.0){
					time_end = System.currentTimeMillis();
//					System.out.println("Tiempo empleado "+ ( time_end - time_start )/1000 +" segundos");
					bContinuar.setEnabled(true);
				}
//				System.out.println("Termina hebra: " + numHebra);
			} catch (IOException | SAXException | TikaException ex) {
				Logger.getLogger(Configuracion.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
	};
	
	private void cargarListaColecciones(){
		File directorio = new File("./colecciones/");
		File[] colecciones = directorio.listFiles();
		jListaColecciones.removeAllItems();
		if (directorio.exists()){
			for (File f: colecciones){
				if (f.isDirectory()){
					jListaColecciones.addItem(f.getName());
				}
			}
		}
		if (jListaColecciones.getItemCount()==0){
			jListaColecciones.setEnabled(false);
			jListaEtapa.setEnabled(false);
			bBorrarExistente.setEnabled(false);
			bCargarExistente.setEnabled(false);
		}
	}

	
		private class HebraCargandoColeccion extends Thread{

		public HebraCargandoColeccion(){
		}
		
		@Override
		public void run() {
			if (jListaEtapa.getSelectedIndex() == 0){
					try {
						if (cargarEtapa1()){
							jdCargarColeccion.dispose();
							Aplicacion app = new Aplicacion();
							Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
							app.setLocation(dim.width/2-app.getSize().width/2, dim.height/2-app.getSize().height/2);
							app.setVisible(true);
							dispose();
						}
					} catch (IOException ex) {
						Logger.getLogger(Configuracion.class.getName()).log(Level.SEVERE, null, ex);
					}
				}else{	// Si la etapa seleccionada es la de creación del índice...
					if (jListaEtapa.getSelectedIndex() == 1){
						cargarEtapas(1);
						jdCargarColeccion.dispose();
					}else{	// Si la etapa seleccionada es la de consultas...
						cargarEtapas(2);
						jdCargarColeccion.dispose();
					}
				}
		}
	};

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bBorrarExistente;
    private javax.swing.JButton bCargarExistente;
    private javax.swing.JButton bContinuar;
    private javax.swing.JButton bDirColeccion;
    private javax.swing.JButton bDirStopWords;
    private javax.swing.JButton bNuevaCol;
    private javax.swing.ButtonGroup bgIdioma;
    private javax.swing.ButtonGroup bgPublica;
    private javax.swing.JCheckBox cbStopWords;
    private javax.swing.JFileChooser fcDirColeccion;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JComboBox<String> jListaColecciones;
    private javax.swing.JComboBox<String> jListaEtapa;
    private javax.swing.JTextPane jPaneAyuda;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JProgressBar jProgreso;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JDialog jdAyuda;
    private javax.swing.JDialog jdCargarColeccion;
    private javax.swing.JDialog jdProcesamiento;
    private javax.swing.JLabel lCargandoColeccion;
    private javax.swing.JLabel lColecciones;
    private javax.swing.JLabel lDocColeccion;
    private javax.swing.JLabel lEtapaInicio;
    private javax.swing.JLabel lNomColeccion;
    private javax.swing.JLabel lTituloConfiguracion;
    private javax.swing.JOptionPane pError;
    private javax.swing.JPanel pExistenteColeccion;
    private javax.swing.JPanel pIdiomaColeccion;
    private javax.swing.JPanel pNuevaColeccion;
    private javax.swing.JRadioButton rbEnglish;
    private javax.swing.JRadioButton rbSpanish;
    private javax.swing.JTextField tDirColeccion;
    private javax.swing.JTextField tFileStopWords;
    private javax.swing.JTextField tNomColeccion;
    // End of variables declaration//GEN-END:variables

	private void cambiarIdioma(){
		lDocColeccion.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_docColeccion"));
		lNomColeccion.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_nomColeccion"));
		pIdiomaColeccion.setBorder(new TitledBorder(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_borde_idiomaColeccion")));
		cbStopWords.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_checkbox_cbStopWords"));
		rbSpanish.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_radioButton_espanol"));
		rbEnglish.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_radioButton_ingles"));
		bDirColeccion.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_button_examinar"));
		bDirStopWords.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_button_examinar"));
		pNuevaColeccion.setBorder(new TitledBorder(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_borde_nuevaColeccion")));
		pExistenteColeccion.setBorder(new TitledBorder(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_borde_existenteColeccion")));
		lColecciones.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_colecciones"));
		lEtapaInicio.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_etapaInicio"));
		bCargarExistente.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_aceptar"));
		bBorrarExistente.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_boton_borrar"));
		this.setTitle(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("titulo_ventana_configuracion"));
		fcDirColeccion.setDialogTitle(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("titulo_ventana_dialog_coleccion"));
		lTituloConfiguracion.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("etiqueta_label_configuracion"));
		
		// Rellenar opciones para cargar la colección
		
		jListaEtapa.removeAllItems();
		jListaEtapa.addItem(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("cbEtapa_Preprocesado"));
		jListaEtapa.addItem(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("cbEtapa_Indexacion"));
		jListaEtapa.addItem(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("cbEtapa_Consultas"));
		
		// Ventana de procesamiento
		
		jdProcesamiento.setTitle(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("titulo_ventana_preprocesamiento"));
		jLabel7.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("ventana_procesamiento_label7"));
		jLabel8.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("ventana_procesamiento_label8"));
		jLabel9.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("ventana_procesamiento_label9"));
		jLabel10.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("ventana_procesamiento_label10"));
		bContinuar.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("boton_continuar"));
		lCargandoColeccion.setText(ResourceBundle.getBundle("etiquetas.Etiquetas_"+SulaIRL.idioma).getString("jdCargandoColeccion"));
	}
}
